{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip-shadcn",
  "type": "registry:ui",
  "title": "Tooltip",
  "description": "A customizable tooltip component",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-tooltip",
    "motion"
  ],
  "files": [
    {
      "path": "src/registry/pure-ui/components/shadcn/ui/tooltip/index.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  MotionConfig,\r\n  TargetAndTransition,\r\n  Transition,\r\n} from \"motion/react\";\r\n\r\nimport { cn } from \"@/lib/classes\";\r\n\r\nconst animationPresets = {\r\n  none: {\r\n    initial: {},\r\n    animate: {},\r\n    exit: {},\r\n  },\r\n  fade: {\r\n    initial: { opacity: 0 },\r\n    animate: { opacity: 1 },\r\n    exit: { opacity: 0 },\r\n  },\r\n  slideOutside: {},\r\n  slideInside: {},\r\n  scale: {\r\n    initial: {\r\n      opacity: 0,\r\n      transform: \"scale(0.8)\",\r\n    },\r\n    animate: {\r\n      opacity: 1,\r\n      transform: \"scale(1)\",\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      transform: \"scale(0.8)\",\r\n    },\r\n  },\r\n  wipe: {},\r\n  wipeScale: {},\r\n  motion: {},\r\n  motionBlur: {},\r\n};\r\n\r\nfunction getSlideOutsideAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const slideOutsideConfigs = {\r\n    top: {\r\n      initial: { opacity: 0, y: -10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: -10 },\r\n    },\r\n    right: {\r\n      initial: { opacity: 0, x: 10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: 10 },\r\n    },\r\n    bottom: {\r\n      initial: { opacity: 0, y: 10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: 10 },\r\n    },\r\n    left: {\r\n      initial: { opacity: 0, x: -10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: -10 },\r\n    },\r\n  };\r\n\r\n  return slideOutsideConfigs[side];\r\n}\r\n\r\nfunction getSlideInsideAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const slideInsideConfigs = {\r\n    top: {\r\n      initial: { opacity: 0, y: 10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: 10 },\r\n    },\r\n    right: {\r\n      initial: { opacity: 0, x: -10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: -10 },\r\n    },\r\n    bottom: {\r\n      initial: { opacity: 0, y: -10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: -10 },\r\n    },\r\n    left: {\r\n      initial: { opacity: 0, x: 10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: 10 },\r\n    },\r\n  };\r\n\r\n  return slideInsideConfigs[side];\r\n}\r\n\r\nfunction getWipeAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const wipeConfigs = {\r\n    // Top: reveals from bottom to top (down to up)\r\n    top: {\r\n      initial: {\r\n        clipPath: \"inset(100% 0 0 0 round 8px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(100% 0 0 0 round 8px)\",\r\n      },\r\n    },\r\n    // Right: reveals from left to right\r\n    right: {\r\n      initial: {\r\n        clipPath: \"inset(0 100% 0 0 round 8px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 100% 0 0 round 8px)\",\r\n      },\r\n    },\r\n    // Bottom: reveals from top to bottom (up to down)\r\n    bottom: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 100% 0 round 8px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 100% 0 round 8px)\",\r\n      },\r\n    },\r\n    // Left: reveals from right to left\r\n    left: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 0 100% round 8px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 0 100% round 8px)\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return wipeConfigs[side];\r\n}\r\n\r\nfunction getWipeScaleAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const wipeConfigs = {\r\n    // Top: reveals from bottom to top (down to up)\r\n    top: {\r\n      initial: {\r\n        clipPath: \"inset(100% 0 0 0 round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(100% 0 0 0 round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n    // Right: reveals from left to right\r\n    right: {\r\n      initial: {\r\n        clipPath: \"inset(0 100% 0 0 round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 100% 0 0 round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n    // Bottom: reveals from top to bottom (up to down)\r\n    bottom: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 100% 0 round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 100% 0 round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n    // Left: reveals from right to left\r\n    left: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 0 100% round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 8px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 0 100% round 8px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n  };\r\n\r\n  return wipeConfigs[side];\r\n}\r\n\r\nfunction getMotionAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const motionConfigs = {\r\n    top: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n    },\r\n    right: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n    },\r\n    bottom: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n    },\r\n    left: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n    },\r\n  };\r\n\r\n  return motionConfigs[side];\r\n}\r\n\r\nfunction getMotionBlurAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const motionBlurConfigs = {\r\n    top: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n    },\r\n    right: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n    },\r\n    bottom: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n    },\r\n    left: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n    },\r\n  };\r\n\r\n  return motionBlurConfigs[side];\r\n}\r\n\r\nconst transitionPresets = {\r\n  inExpo: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.95, 0.05, 0.795, 0.035],\r\n  },\r\n  outExpo: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.19, 1, 0.22, 1],\r\n  },\r\n  inOutExpo: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [1, 0, 0, 1],\r\n  },\r\n  anticipate: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [1, -0.4, 0.35, 0.95],\r\n  },\r\n  quickOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0, 0, 0.2, 1],\r\n  },\r\n  overshootOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.175, 0.885, 0.32, 1.275],\r\n  },\r\n  swiftOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.175, 0.885, 0.32, 1.1],\r\n  },\r\n  snappyOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.19, 1, 0.22, 1],\r\n  },\r\n  in: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.42, 0, 1, 1],\r\n  },\r\n  out: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0, 0, 0.58, 1],\r\n  },\r\n  inOut: {\r\n    type: \"tween\",\r\n    duration: 0.25,\r\n    ease: [0.42, 0, 0.58, 1],\r\n  },\r\n  outIn: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.1, 0.7, 0.9, 0.5],\r\n  },\r\n  inQuad: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.55, 0.085, 0.68, 0.53],\r\n  },\r\n  outQuad: {\r\n    type: \"tween\",\r\n    duration: 0.25,\r\n    ease: [0.25, 0.46, 0.45, 0.94],\r\n  },\r\n  inOutQuad: {\r\n    type: \"tween\",\r\n    duration: 0.32,\r\n    ease: [0.455, 0.03, 0.515, 0.955],\r\n  },\r\n  inCubic: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.55, 0.055, 0.675, 0.19],\r\n  },\r\n  outCubic: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.215, 0.61, 0.355, 1],\r\n  },\r\n  inOutCubic: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.645, 0.045, 0.355, 1],\r\n  },\r\n  inQuart: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.895, 0.03, 0.685, 0.22],\r\n  },\r\n  outQuart: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.165, 0.84, 0.44, 1],\r\n  },\r\n  inOutQuart: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.77, 0, 0.175, 1],\r\n  },\r\n  inQuint: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.755, 0.05, 0.855, 0.06],\r\n  },\r\n  outQuint: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.23, 1, 0.32, 1],\r\n  },\r\n  inOutQuint: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.86, 0, 0.07, 1],\r\n  },\r\n  inCirc: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.6, 0.04, 0.98, 0.335],\r\n  },\r\n  outCirc: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.075, 0.82, 0.165, 1],\r\n  },\r\n  inOutCirc: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.785, 0.135, 0.15, 0.86],\r\n  },\r\n  inOutBase: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.25, 0.1, 0.25, 1],\r\n  },\r\n} as const;\r\n\r\ntype AnimationPreset = keyof typeof animationPresets;\r\ntype TransitionPreset = keyof typeof transitionPresets;\r\n\r\ninterface CustomAnimation {\r\n  initial?: TargetAndTransition;\r\n  animate?: TargetAndTransition;\r\n  exit?: TargetAndTransition;\r\n}\r\n\r\ninterface TooltipContextType {\r\n  open: boolean;\r\n}\r\n\r\nconst TooltipContext = React.createContext<TooltipContextType>({\r\n  open: false,\r\n});\r\n\r\nconst useTooltip = () => {\r\n  const context = React.useContext(TooltipContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useTooltip must be used within a TooltipProvider\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\ninterface TooltipProviderProps\r\n  extends React.ComponentProps<typeof TooltipPrimitive.Provider> {}\r\n\r\nfunction TooltipProvider({ delayDuration = 0, ...rest }: TooltipProviderProps) {\r\n  return (\r\n    <TooltipPrimitive.Provider\r\n      data-slot=\"tooltip-provider\"\r\n      delayDuration={delayDuration}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n\r\ninterface TooltipProps\r\n  extends React.ComponentProps<typeof TooltipPrimitive.Root> {}\r\n\r\nfunction Tooltip(props: TooltipProps) {\r\n  const [isOpen, setIsOpen] = React.useState(\r\n    props?.open ?? props?.defaultOpen ?? false\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (props?.open !== undefined) setIsOpen(props.open);\r\n  }, [props?.open]);\r\n\r\n  const handleOpenChange = React.useCallback(\r\n    (open: boolean) => {\r\n      setIsOpen(open);\r\n      props.onOpenChange?.(open);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  const value = {\r\n    open: isOpen,\r\n  };\r\n\r\n  return (\r\n    <TooltipContext.Provider value={value}>\r\n      <TooltipProvider>\r\n        <TooltipPrimitive.Root\r\n          data-slot=\"tooltip\"\r\n          {...props}\r\n          onOpenChange={handleOpenChange}\r\n        />\r\n      </TooltipProvider>\r\n    </TooltipContext.Provider>\r\n  );\r\n}\r\n\r\ninterface TooltipTriggerProps\r\n  extends React.ComponentProps<typeof TooltipPrimitive.Trigger> {}\r\n\r\nfunction TooltipTrigger(props: TooltipTriggerProps) {\r\n  return (\r\n    <TooltipPrimitive.Trigger\r\n      data-slot=\"tooltip-trigger\"\r\n      {...props}\r\n      className={cn(props.className, \"TooltipTrigger\")}\r\n    />\r\n  );\r\n}\r\n\r\ninterface TooltipContentProps\r\n  extends React.ComponentProps<typeof TooltipPrimitive.Content> {\r\n  animationPreset?: AnimationPreset;\r\n  transitionPreset?: TransitionPreset;\r\n  animation?: CustomAnimation;\r\n  transition?: Transition;\r\n  reduceMotion?: boolean;\r\n}\r\n\r\nfunction TooltipContent({\r\n  className,\r\n  side = \"top\",\r\n  sideOffset = 10,\r\n  animationPreset = \"scale\",\r\n  animation,\r\n  transitionPreset = \"inOutQuad\",\r\n  transition,\r\n  reduceMotion = false,\r\n  ...props\r\n}: TooltipContentProps) {\r\n  const { open } = useTooltip();\r\n\r\n  const animationConfig = React.useMemo(() => {\r\n    if (reduceMotion) {\r\n      return animationPresets.none;\r\n    }\r\n\r\n    if (animation) {\r\n      return animation;\r\n    }\r\n\r\n    if (animationPreset) {\r\n      // Use dynamic wipe animation based on side\r\n      if (animationPreset === \"slideInside\") {\r\n        return getSlideInsideAnimation(side);\r\n      }\r\n      if (animationPreset === \"slideOutside\") {\r\n        return getSlideOutsideAnimation(side);\r\n      }\r\n      if (animationPreset === \"wipe\") {\r\n        return getWipeAnimation(side);\r\n      }\r\n      if (animationPreset === \"wipeScale\") {\r\n        return getWipeScaleAnimation(side);\r\n      }\r\n      if (animationPreset === \"motion\") {\r\n        return getMotionAnimation(side);\r\n      }\r\n      if (animationPreset === \"motionBlur\") {\r\n        return getMotionBlurAnimation(side);\r\n      }\r\n      return animationPresets[animationPreset];\r\n    }\r\n\r\n    return animationPresets.fade;\r\n  }, [animation, animationPreset, side, reduceMotion]);\r\n\r\n  const transitionConfig = React.useMemo(() => {\r\n    if (reduceMotion) {\r\n      return {};\r\n    }\r\n\r\n    if (transition) {\r\n      return transition;\r\n    }\r\n\r\n    if (transitionPreset) {\r\n      return transitionPresets[transitionPreset];\r\n    }\r\n\r\n    return transitionPresets.outQuad;\r\n  }, [transition, transitionPreset, reduceMotion]);\r\n\r\n  return (\r\n    <MotionConfig reducedMotion={reduceMotion ? \"always\" : \"never\"}>\r\n      <AnimatePresence>\r\n        {open && (\r\n          <TooltipPrimitive.Portal forceMount data-slot=\"tooltip-portal\">\r\n            <TooltipPrimitive.Content\r\n              asChild\r\n              forceMount\r\n              {...props}\r\n              side={side}\r\n              sideOffset={sideOffset}\r\n            >\r\n              <div className=\"pure-ui\">\r\n                <motion.div\r\n                  key=\"tooltip-content\"\r\n                  initial={animationConfig.initial}\r\n                  animate={animationConfig.animate}\r\n                  exit={animationConfig.exit}\r\n                  transition={transitionConfig}\r\n                  className=\"TooltipContent origin-(--radix-tooltip-content-transform-origin) border rounded-lg py-1 px-4 overflow-auto text-sm tracking-2 bg-(--accent-soft) text-(--accent-soft-foreground) border-(--border) max-w-80 shadow-lg\"\r\n                >\r\n                  {props.children}\r\n                </motion.div>\r\n              </div>\r\n            </TooltipPrimitive.Content>\r\n          </TooltipPrimitive.Portal>\r\n        )}\r\n      </AnimatePresence>\r\n    </MotionConfig>\r\n  );\r\n}\r\n\r\nexport {\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  useTooltip,\r\n  type TooltipContextType,\r\n  type TooltipProps,\r\n  type TooltipTriggerProps,\r\n  type TooltipContentProps,\r\n  type TooltipProviderProps,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}