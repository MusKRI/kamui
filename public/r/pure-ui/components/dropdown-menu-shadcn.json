{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-menu-shadcn",
  "type": "registry:ui",
  "title": "Dropdown Menu",
  "description": "A customizable dropdown menu component",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu",
    "motion"
  ],
  "files": [
    {
      "path": "src/registry/pure-ui/components/shadcn/ui/dropdown-menu/index.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\r\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  AnimatePresence,\r\n  LayoutGroup,\r\n  motion,\r\n  MotionConfig,\r\n  TargetAndTransition,\r\n  Transition,\r\n} from \"motion/react\";\r\n\r\nimport { cn } from \"@/lib/classes\";\r\n\r\nconst contentAnimationPresets = {\r\n  none: {\r\n    initial: {},\r\n    animate: {},\r\n    exit: {},\r\n  },\r\n  scale: {\r\n    initial: {\r\n      opacity: 0,\r\n      transform: \"scale(0.8)\",\r\n    },\r\n    animate: {\r\n      opacity: 1,\r\n      transform: \"scale(1)\",\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      transform: \"scale(0.8)\",\r\n    },\r\n  },\r\n  wipe: {},\r\n  wipeScale: {},\r\n  motion: {},\r\n  motionBlur: {},\r\n  slideOutside: {},\r\n  slideInside: {},\r\n};\r\n\r\nfunction getWipeAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const wipeConfigs = {\r\n    // Top: reveals from bottom to top (down to up)\r\n    top: {\r\n      initial: {\r\n        clipPath: \"inset(100% 0 0 0 round 12px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n        transition: {\r\n          delayChildren: 0.1,\r\n          staggerChildren: 0.1,\r\n        },\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(100% 0 0 0 round 12px)\",\r\n      },\r\n    },\r\n    // Right: reveals from left to right\r\n    right: {\r\n      initial: {\r\n        clipPath: \"inset(0 100% 0 0 round 12px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 100% 0 0 round 12px)\",\r\n      },\r\n    },\r\n    // Bottom: reveals from top to bottom (up to down)\r\n    bottom: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 100% 0 round 12px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 100% 0 round 12px)\",\r\n      },\r\n    },\r\n    // Left: reveals from right to left\r\n    left: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 0 100% round 12px)\",\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 0 100% round 12px)\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return wipeConfigs[side];\r\n}\r\n\r\nfunction getWipeScaleAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const wipeConfigs = {\r\n    // Top: reveals from bottom to top (down to up)\r\n    top: {\r\n      initial: {\r\n        clipPath: \"inset(100% 0 0 0 round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(100% 0 0 0 round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n    // Right: reveals from left to right\r\n    right: {\r\n      initial: {\r\n        clipPath: \"inset(0 100% 0 0 round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 100% 0 0 round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n    // Bottom: reveals from top to bottom (up to down)\r\n    bottom: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 100% 0 round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 100% 0 round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n    // Left: reveals from right to left\r\n    left: {\r\n      initial: {\r\n        clipPath: \"inset(0 0 0 100% round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n      animate: {\r\n        clipPath: \"inset(0 0 0 0 round 12px)\",\r\n        scale: 1,\r\n      },\r\n      exit: {\r\n        clipPath: \"inset(0 0 0 100% round 12px)\",\r\n        scale: 0.8,\r\n      },\r\n    },\r\n  };\r\n\r\n  return wipeConfigs[side];\r\n}\r\n\r\nfunction getSlideOutsideAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const slideOutsideConfigs = {\r\n    top: {\r\n      initial: { opacity: 0, y: -10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: -10 },\r\n    },\r\n    right: {\r\n      initial: { opacity: 0, x: 10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: 10 },\r\n    },\r\n    bottom: {\r\n      initial: { opacity: 0, y: 10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: 10 },\r\n    },\r\n    left: {\r\n      initial: { opacity: 0, x: -10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: -10 },\r\n    },\r\n  };\r\n\r\n  return slideOutsideConfigs[side];\r\n}\r\n\r\nfunction getSlideInsideAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const slideInsideConfigs = {\r\n    top: {\r\n      initial: { opacity: 0, y: 10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: 10 },\r\n    },\r\n    right: {\r\n      initial: { opacity: 0, x: -10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: -10 },\r\n    },\r\n    bottom: {\r\n      initial: { opacity: 0, y: -10 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: -10 },\r\n    },\r\n    left: {\r\n      initial: { opacity: 0, x: 10 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: 10 },\r\n    },\r\n  };\r\n\r\n  return slideInsideConfigs[side];\r\n}\r\n\r\nfunction getMotionAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const motionConfigs = {\r\n    top: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n    },\r\n    right: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n    },\r\n    bottom: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n    },\r\n    left: {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n    },\r\n  };\r\n\r\n  return motionConfigs[side];\r\n}\r\n\r\nfunction getMotionBlurAnimation(side: \"top\" | \"right\" | \"bottom\" | \"left\") {\r\n  const motionBlurConfigs = {\r\n    top: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(70deg) scale(0.56) translateY(7px)`,\r\n      },\r\n    },\r\n    right: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(40deg) scale(0.56) translateX(7px)`,\r\n      },\r\n    },\r\n    bottom: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateX(0deg) scale(1) translateY(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateX(-40deg) scale(0.56) translateY(-7px)`,\r\n      },\r\n    },\r\n    left: {\r\n      initial: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n      animate: {\r\n        opacity: 1,\r\n        filter: \"blur(0px)\",\r\n        transform: `perspective(1000px) rotateY(0deg) scale(1) translateX(0px)`,\r\n      },\r\n      exit: {\r\n        opacity: 0,\r\n        filter: \"blur(6px)\",\r\n        transform: `perspective(1000px) rotateY(-40deg) scale(0.56) translateX(-7px)`,\r\n      },\r\n    },\r\n  };\r\n\r\n  return motionBlurConfigs[side];\r\n}\r\n\r\nconst contentTransitionPresets = {\r\n  inExpo: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.95, 0.05, 0.795, 0.035],\r\n  },\r\n  outExpo: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.19, 1, 0.22, 1],\r\n  },\r\n  inOutExpo: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [1, 0, 0, 1],\r\n  },\r\n  anticipate: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [1, -0.4, 0.35, 0.95],\r\n  },\r\n  quickOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0, 0, 0.2, 1],\r\n  },\r\n  overshootOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.175, 0.885, 0.32, 1.275],\r\n  },\r\n  swiftOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.175, 0.885, 0.32, 1.1],\r\n  },\r\n  snappyOut: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.19, 1, 0.22, 1],\r\n  },\r\n  in: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.42, 0, 1, 1],\r\n  },\r\n  out: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0, 0, 0.58, 1],\r\n  },\r\n  inOut: {\r\n    type: \"tween\",\r\n    duration: 0.25,\r\n    ease: [0.42, 0, 0.58, 1],\r\n  },\r\n  outIn: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.1, 0.7, 0.9, 0.5],\r\n  },\r\n  inQuad: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.55, 0.085, 0.68, 0.53],\r\n  },\r\n  outQuad: {\r\n    type: \"tween\",\r\n    duration: 0.25,\r\n    ease: [0.25, 0.46, 0.45, 0.94],\r\n  },\r\n  inOutQuad: {\r\n    type: \"tween\",\r\n    duration: 0.32,\r\n    ease: [0.455, 0.03, 0.515, 0.955],\r\n  },\r\n  inCubic: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.55, 0.055, 0.675, 0.19],\r\n  },\r\n  outCubic: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.215, 0.61, 0.355, 1],\r\n  },\r\n  inOutCubic: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.645, 0.045, 0.355, 1],\r\n  },\r\n  inQuart: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.895, 0.03, 0.685, 0.22],\r\n  },\r\n  outQuart: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.165, 0.84, 0.44, 1],\r\n  },\r\n  inOutQuart: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.77, 0, 0.175, 1],\r\n  },\r\n  inQuint: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.755, 0.05, 0.855, 0.06],\r\n  },\r\n  outQuint: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.23, 1, 0.32, 1],\r\n  },\r\n  inOutQuint: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.86, 0, 0.07, 1],\r\n  },\r\n  inCirc: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.6, 0.04, 0.98, 0.335],\r\n  },\r\n  outCirc: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.075, 0.82, 0.165, 1],\r\n  },\r\n  inOutCirc: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.785, 0.135, 0.15, 0.86],\r\n  },\r\n  inOutBase: {\r\n    type: \"tween\",\r\n    duration: 0.35,\r\n    ease: [0.25, 0.1, 0.25, 1],\r\n  },\r\n} as const;\r\n\r\ntype ContentAnimationPreset = keyof typeof contentAnimationPresets;\r\ntype ContentTransitionPreset = keyof typeof contentTransitionPresets;\r\n\r\ninterface CustomAnimation {\r\n  initial?: TargetAndTransition;\r\n  animate?: TargetAndTransition;\r\n  exit?: TargetAndTransition;\r\n}\r\n\r\ninterface DropdownMenuContextType {\r\n  isOpen?: boolean;\r\n}\r\n\r\nconst DropdownMenuContext = createContext<DropdownMenuContextType>({});\r\n\r\ninterface DropdownMenuProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.Root> {}\r\n\r\nfunction DropdownMenu(props: DropdownMenuProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props?.open !== undefined) setIsOpen(props.open);\r\n  }, [props?.open]);\r\n\r\n  const handleOpenChange = useCallback(\r\n    (open: boolean) => {\r\n      setIsOpen(open);\r\n      props.onOpenChange?.(open);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  return (\r\n    <DropdownMenuContext.Provider value={{ isOpen }}>\r\n      <DropdownMenuPrimitive.Root\r\n        data-slot=\"dropdown-menu\"\r\n        {...props}\r\n        onOpenChange={handleOpenChange}\r\n      />\r\n    </DropdownMenuContext.Provider>\r\n  );\r\n}\r\n\r\ninterface DropdownMenuTriggerProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.Trigger> {}\r\n\r\nfunction DropdownMenuTrigger(props: DropdownMenuTriggerProps) {\r\n  return (\r\n    <DropdownMenuPrimitive.Trigger\r\n      data-slot=\"dropdown-menu-trigger\"\r\n      className={cn(\r\n        \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n        props.className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\ninterface DropdownMenuPortalProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.Portal> {}\r\n\r\nfunction DropdownMenuPortal(props: DropdownMenuPortalProps) {\r\n  return (\r\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\r\n  );\r\n}\r\n\r\ninterface DropdownMenuContentProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.Content> {\r\n  animationPreset?: ContentAnimationPreset;\r\n  transitionPreset?: ContentTransitionPreset;\r\n  animation?: CustomAnimation;\r\n  transition?: Transition;\r\n  reduceMotion?: boolean;\r\n}\r\n\r\nfunction DropdownMenuContent({\r\n  className,\r\n  children,\r\n  animationPreset = \"scale\",\r\n  animation,\r\n  transitionPreset = \"overshootOut\",\r\n  transition,\r\n  reduceMotion = false,\r\n  sideOffset = 4,\r\n  side = \"bottom\",\r\n  ...props\r\n}: DropdownMenuContentProps) {\r\n  const { isOpen } = useContext(DropdownMenuContext);\r\n\r\n  const animationConfig = useMemo(() => {\r\n    if (reduceMotion) {\r\n      return contentAnimationPresets.none;\r\n    }\r\n\r\n    if (animation) {\r\n      return animation;\r\n    }\r\n\r\n    if (animationPreset) {\r\n      if (animationPreset === \"wipe\") {\r\n        return getWipeAnimation(side);\r\n      }\r\n      if (animationPreset === \"slideOutside\") {\r\n        return getSlideOutsideAnimation(side);\r\n      }\r\n      if (animationPreset === \"slideInside\") {\r\n        return getSlideInsideAnimation(side);\r\n      }\r\n      if (animationPreset === \"wipeScale\") {\r\n        return getWipeScaleAnimation(side);\r\n      }\r\n      if (animationPreset === \"motion\") {\r\n        return getMotionAnimation(side);\r\n      }\r\n      if (animationPreset === \"motionBlur\") {\r\n        return getMotionBlurAnimation(side);\r\n      }\r\n      return contentAnimationPresets[animationPreset];\r\n    }\r\n\r\n    return contentAnimationPresets.scale;\r\n  }, [animation, animationPreset, reduceMotion, side]);\r\n\r\n  const transitionConfig = useMemo(() => {\r\n    if (reduceMotion) {\r\n      return {};\r\n    }\r\n\r\n    if (transition) {\r\n      return transition;\r\n    }\r\n\r\n    if (transitionPreset) {\r\n      return contentTransitionPresets[transitionPreset];\r\n    }\r\n\r\n    return contentTransitionPresets.outQuad;\r\n  }, [transition, transitionPreset, reduceMotion]);\r\n\r\n  return (\r\n    <MotionConfig reducedMotion={reduceMotion ? \"always\" : \"never\"}>\r\n      <AnimatePresence initial={false} mode=\"wait\">\r\n        {isOpen && (\r\n          <DropdownMenuPortal forceMount>\r\n            <DropdownMenuPrimitive.Content\r\n              data-slot=\"dropdown-menu-content\"\r\n              asChild\r\n              className={\"pure-ui\"}\r\n              sideOffset={sideOffset}\r\n              side={side}\r\n              {...props}\r\n            >\r\n              <motion.div\r\n                key=\"dropdown-menu-content\"\r\n                initial={animationConfig.initial}\r\n                animate={animationConfig.animate}\r\n                exit={animationConfig.exit}\r\n                transition={transitionConfig}\r\n                style={{\r\n                  willChange: \"transform, opacity, filter, clipPath\",\r\n                  perspective: \"1000px\",\r\n                }}\r\n                className={cn(\r\n                  \"border-[0.5px] border-(--border)/60 bg-(--surface-2) text-(--foreground)\",\r\n                  \"rounded-[12px] p-1 shadow-lg !min-w-[8rem] z-50\",\r\n                  \"w-(--radix-dropdown-menu-trigger-width) max-h-(--radix-dropdown-menu-content-available-height) origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto\",\r\n                  className\r\n                )}\r\n              >\r\n                {children}\r\n              </motion.div>\r\n            </DropdownMenuPrimitive.Content>\r\n          </DropdownMenuPortal>\r\n        )}\r\n      </AnimatePresence>\r\n    </MotionConfig>\r\n  );\r\n}\r\n\r\ninterface DropdownMenuGroupProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.Group> {}\r\n\r\nfunction DropdownMenuGroup(props: DropdownMenuGroupProps) {\r\n  return (\r\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\r\n  );\r\n}\r\n\r\ninterface DropdownMenuItemProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.Item> {}\r\n\r\nfunction DropdownMenuItem({\r\n  children,\r\n  className,\r\n  ...props\r\n}: DropdownMenuItemProps) {\r\n  return (\r\n    <DropdownMenuPrimitive.Item\r\n      className={cn(\r\n        \"text-(--foreground) border-[0.5px] border-transparent\",\r\n        \"focus:bg-(--accent-foreground) focus:shadow-sm focus:text-(--accent) focus:border-(--border)/30 relative flex cursor-default items-center gap-2 rounded-[10px] px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n        \"[transition:0.01s_ease] [transition-property:background-color,color,border-color,box-shadow]\",\r\n        className\r\n      )}\r\n      data-slot=\"dropdown-menu-item\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuPrimitive.Item>\r\n  );\r\n}\r\n\r\ninterface DropdownMenuCheckboxItemProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem> {}\r\n\r\nfunction DropdownMenuCheckboxItem({\r\n  className,\r\n  children,\r\n  checked,\r\n  ...props\r\n}: DropdownMenuCheckboxItemProps) {\r\n  return (\r\n    <DropdownMenuPrimitive.CheckboxItem\r\n      data-slot=\"dropdown-menu-checkbox-item\"\r\n      className={cn(\r\n        \"text-(--foreground) border-[0.5px] border-transparent\",\r\n        \"focus:bg-(--accent-foreground) focus:shadow-sm focus:text-(--accent) focus:border-(--border)/30 relative flex cursor-default items-center gap-2 rounded-[10px] px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n        \"[transition:0.01s_ease] [transition-property:background-color,color,border-color,box-shadow]\",\r\n        className\r\n      )}\r\n      checked={checked}\r\n      {...props}\r\n    >\r\n      <span className=\"pointer-events-none absolute right-2 flex size-3.5 items-center justify-center\">\r\n        <DropdownMenuPrimitive.ItemIndicator>\r\n          <CheckIcon className=\"size-4\" />\r\n        </DropdownMenuPrimitive.ItemIndicator>\r\n      </span>\r\n      {children}\r\n    </DropdownMenuPrimitive.CheckboxItem>\r\n  );\r\n}\r\n\r\ninterface DropdownMenuRadioGroupContextType {\r\n  selectedValue?: string;\r\n  activeIcon?: React.ReactNode;\r\n}\r\n\r\nconst DropdownMenuRadioGroupContext =\r\n  createContext<DropdownMenuRadioGroupContextType>({});\r\n\r\ninterface DropdownMenuRadioGroupProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup> {\r\n  activeIcon?: React.ReactNode;\r\n}\r\n\r\nfunction DropdownMenuRadioGroup({\r\n  className,\r\n  activeIcon,\r\n  ...props\r\n}: DropdownMenuRadioGroupProps) {\r\n  const [selectedValue, setSelectedValue] = useState<string | undefined>(\r\n    props.value ?? undefined\r\n  );\r\n\r\n  useEffect(() => {\r\n    setSelectedValue(props.value ?? undefined);\r\n  }, [props.value]);\r\n\r\n  const handleValueChange = useCallback(\r\n    (value: string) => {\r\n      setSelectedValue(value);\r\n      props.onValueChange?.(value);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  return (\r\n    <DropdownMenuRadioGroupContext.Provider\r\n      value={{ selectedValue, activeIcon }}\r\n    >\r\n      <LayoutGroup>\r\n        <DropdownMenuPrimitive.RadioGroup\r\n          data-slot=\"dropdown-menu-radio-group\"\r\n          {...props}\r\n          onValueChange={handleValueChange}\r\n        />\r\n      </LayoutGroup>\r\n    </DropdownMenuRadioGroupContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuRadioItem({\r\n  className,\r\n  children,\r\n  value,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\r\n  const { selectedValue, activeIcon } = useContext(\r\n    DropdownMenuRadioGroupContext\r\n  );\r\n  const isSelected = selectedValue === value;\r\n\r\n  return (\r\n    <DropdownMenuPrimitive.RadioItem\r\n      data-slot=\"dropdown-menu-radio-item\"\r\n      className={cn(\r\n        \"text-(--foreground) border-[0.5px] border-transparent\",\r\n        \"focus:bg-(--accent-foreground) focus:shadow-sm focus:text-(--accent) focus:border-(--border)/30 relative flex cursor-default items-center gap-2 rounded-[10px] px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n        \"[transition:0.01s_ease] [transition-property:background-color,color,border-color,box-shadow]\",\r\n        className\r\n      )}\r\n      value={value}\r\n      {...props}\r\n    >\r\n      {children}\r\n      {isSelected && (\r\n        <motion.span\r\n          layoutId=\"dropdown-menu-radio-indicator\"\r\n          className=\"pointer-events-none absolute right-2 flex size-3.5 items-center justify-center\"\r\n          style={{\r\n            willChange: \"transform\",\r\n          }}\r\n          transition={{\r\n            type: \"spring\",\r\n            stiffness: 300,\r\n            damping: 30,\r\n          }}\r\n        >\r\n          <DropdownMenuPrimitive.ItemIndicator>\r\n            {activeIcon ?? <CircleIcon className=\"size-2 fill-current\" />}\r\n          </DropdownMenuPrimitive.ItemIndicator>\r\n        </motion.span>\r\n      )}\r\n    </DropdownMenuPrimitive.RadioItem>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuLabel({\r\n  className,\r\n  inset,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\r\n  inset?: boolean;\r\n}) {\r\n  return (\r\n    <DropdownMenuPrimitive.Label\r\n      data-slot=\"dropdown-menu-label\"\r\n      data-inset={inset}\r\n      className={cn(\r\n        \"px-2 py-1.5 text-xs font-medium data-[inset]:pl-8\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuSeparator({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\r\n  return (\r\n    <DropdownMenuPrimitive.Separator\r\n      data-slot=\"dropdown-menu-separator\"\r\n      className={cn(\"bg-(--border)/30 -mx-1 my-1 h-[0.5px]\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuShortcut({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<\"span\">) {\r\n  return (\r\n    <span\r\n      data-slot=\"dropdown-menu-shortcut\"\r\n      className={cn(\r\n        \"text-(--muted-foreground) ml-auto text-xs tracking-widest\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\ninterface DropdownMenuSubContextType {\r\n  isOpen?: boolean;\r\n}\r\n\r\nconst DropdownMenuSubContext = createContext<DropdownMenuSubContextType>({});\r\n\r\nfunction DropdownMenuSub({\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\r\n  const [isOpen, setIsOpen] = useState(\r\n    props?.open ?? props?.defaultOpen ?? false\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (props?.open !== undefined) setIsOpen(props.open);\r\n  }, [props?.open]);\r\n\r\n  const handleOpenChange = useCallback(\r\n    (open: boolean) => {\r\n      setIsOpen(open);\r\n      props.onOpenChange?.(open);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  return (\r\n    <DropdownMenuSubContext.Provider value={{ isOpen }}>\r\n      <DropdownMenuPrimitive.Sub\r\n        data-slot=\"dropdown-menu-sub\"\r\n        {...props}\r\n        onOpenChange={handleOpenChange}\r\n      />\r\n    </DropdownMenuSubContext.Provider>\r\n  );\r\n}\r\n\r\ninterface DropdownMenuSubTriggerProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> {}\r\n\r\nfunction DropdownMenuSubTrigger({\r\n  className,\r\n  children,\r\n  ...props\r\n}: DropdownMenuSubTriggerProps) {\r\n  return (\r\n    <DropdownMenuPrimitive.SubTrigger\r\n      data-slot=\"dropdown-menu-sub-trigger\"\r\n      className={cn(\r\n        \"text-(--foreground) border-[0.5px] border-transparent\",\r\n        \"focus:bg-(--accent-foreground) focus:shadow-sm focus:text-(--accent) focus:border-(--border)/30 relative flex cursor-default items-center gap-2 rounded-[10px] px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n        \"[transition:0.01s_ease] [transition-property:background-color,color,border-color,box-shadow]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronRightIcon className=\"ml-auto size-4\" />\r\n    </DropdownMenuPrimitive.SubTrigger>\r\n  );\r\n}\r\n\r\ninterface DropdownMenuSubContentProps\r\n  extends React.ComponentProps<typeof DropdownMenuPrimitive.SubContent> {}\r\n\r\nfunction DropdownMenuSubContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}: DropdownMenuSubContentProps) {\r\n  const { isOpen } = useContext(DropdownMenuSubContext);\r\n\r\n  return (\r\n    <AnimatePresence initial={false} mode=\"wait\">\r\n      {isOpen && (\r\n        <DropdownMenuPortal forceMount>\r\n          <DropdownMenuPrimitive.SubContent\r\n            data-slot=\"dropdown-menu-sub-content\"\r\n            className={cn(\r\n              \"pure-ui border-[0.5px] border-(--border)/60 bg-(--surface-2) text-(--foreground) z-50 !min-w-[8rem] overflow-hidden rounded-[12px] p-1 shadow-lg\",\r\n              \"w-(--radix-dropdown-menu-trigger-width) max-h-(--radix-dropdown-menu-content-available-height) origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto\",\r\n              className\r\n            )}\r\n            {...props}\r\n            asChild\r\n          >\r\n            <motion.div\r\n              variants={contentAnimationPresets[\"scale\"]}\r\n              initial=\"initial\"\r\n              animate=\"animate\"\r\n              exit=\"exit\"\r\n              transition={{ duration: 0.1 }}\r\n            >\r\n              {children}\r\n            </motion.div>\r\n          </DropdownMenuPrimitive.SubContent>\r\n        </DropdownMenuPortal>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nexport {\r\n  DropdownMenu,\r\n  DropdownMenuPortal,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuLabel,\r\n  DropdownMenuItem,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuSub,\r\n  DropdownMenuSubTrigger,\r\n  DropdownMenuSubContent,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}