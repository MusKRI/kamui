{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-shadcn",
  "type": "registry:ui",
  "title": "Checkbox",
  "description": "A customizable checkbox component",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-checkbox"
  ],
  "files": [
    {
      "path": "src/registry/pure-ui/components/shadcn/ui/checkbox/index.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { cn } from \"@/lib/classes\";\r\n\r\nconst checkboxVariants = cva(\r\n  [\r\n    // Root\r\n    `group size-7 relative inline-flex items-center justify-center shrink-0 overflow-hidden outline-hidden focus:outline-hidden focus-visible:outline-hidden cursor-pointer`,\r\n    `before:content-[''] before:absolute before:border-2 before:inset-0 before:border-(--border) not-disabled:hover:before:bg-(--accent-soft)/40`,\r\n    `disabled:cursor-not-allowed disabled:grayscale disabled:scale-100 disabled:opacity-50`,\r\n    `after:content-[''] after:absolute after:inset-0 after:scale-50 after:opacity-0 after:origin-center data-[state=checked]:after:scale-100 data-[state=checked]:after:opacity-100 data-[state=indeterminate]:after:scale-100 data-[state=indeterminate]:after:opacity-100`,\r\n    `before:transition-colors active:scale-97 transition-transform after:[transition:0.2s_linear] after:[transition-property:opacity,scale,transform]`,\r\n    `after:bg-gradient-to-b after:from-(--accent)/80 after:to-(--accent) after:text-(--accent-foreground) text-(--accent-foreground)`,\r\n    // indicator\r\n    `[&>[data-slot=\"checkbox-indicator\"]]:relative [&>[data-slot=\"checkbox-indicator\"]]:z-10 [&>[data-slot=\"checkbox-indicator\"]]:h-3 [&>[data-slot=\"checkbox-indicator\"]]:w-4 [&>[data-slot=\"checkbox-indicator\"]]:opacity-0 data-[state=checked]:[&>[data-slot=\"checkbox-indicator\"]]:opacity-100 data-[state=indeterminate]:[&>[data-slot=\"checkbox-indicator\"]]:opacity-100 [&>[data-slot=\"checkbox-indicator\"]]:pointer-events-none`,\r\n    `[&>[data-slot=\"checkbox-indicator\"]]:transition-opacity`,\r\n  ],\r\n  {\r\n    variants: {\r\n      size: {\r\n        sm: [\r\n          \"size-4\",\r\n          // indicator\r\n          `[&>[data-slot=\"checkbox-indicator\"]]:w-3 [&>[data-slot=\"checkbox-indicator\"]]:h-2`,\r\n        ],\r\n        default: [\r\n          \"size-5\",\r\n          // indicator\r\n          `[&>[data-slot=\"checkbox-indicator\"]]:w-4 [&>[data-slot=\"checkbox-indicator\"]]:h-3`,\r\n        ],\r\n        lg: [\r\n          \"size-6\",\r\n          // indicator\r\n          `[&>[data-slot=\"checkbox-indicator\"]]:w-5 [&>[data-slot=\"checkbox-indicator\"]]:h-4`,\r\n        ],\r\n      },\r\n      radius: {\r\n        none: \"rounded-none before:rounded-none after:rounded-none\",\r\n        sm: \"rounded-[6px] before:rounded-[6px] after:rounded-[6px]\",\r\n        default: \"rounded-[7.2px] before:rounded-[7.2px] after:rounded-[7.2px]\",\r\n        lg: \"rounded-[8.4px] before:rounded-[8.4px] after:rounded-[8.4px]\",\r\n        full: \"rounded-full before:rounded-full after:rounded-full\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      radius: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\ntype CheckboxCheckedState = boolean | \"indeterminate\";\r\n\r\nexport type CheckboxIconProps = {\r\n  checked: CheckboxCheckedState;\r\n};\r\n\r\ninterface CheckboxRootProps\r\n  extends React.ComponentProps<typeof CheckboxPrimitive.Root>,\r\n    VariantProps<typeof checkboxVariants> {\r\n  reduceMotion?: boolean;\r\n}\r\n\r\ninterface CheckboxRootContextType {\r\n  checked: CheckboxCheckedState;\r\n  setChecked: (checked: CheckboxCheckedState) => void;\r\n  reduceMotion?: boolean;\r\n}\r\n\r\nconst CheckboxRootContext = React.createContext<\r\n  CheckboxRootContextType | undefined\r\n>(undefined);\r\n\r\nconst useCheckboxRoot = (): CheckboxRootContextType => {\r\n  const context = React.useContext(CheckboxRootContext);\r\n  if (!context) {\r\n    throw new Error(\"useCheckboxRoot must be used within a CheckboxRoot\");\r\n  }\r\n  return context;\r\n};\r\n\r\nfunction CheckboxRoot({\r\n  className,\r\n  size = \"default\",\r\n  radius = \"default\",\r\n  onCheckedChange,\r\n  reduceMotion,\r\n  ...props\r\n}: CheckboxRootProps) {\r\n  const [isChecked, setIsChecked] = React.useState<CheckboxCheckedState>(\r\n    props?.checked ?? props?.defaultChecked ?? false\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (props?.checked !== undefined) setIsChecked(props.checked);\r\n  }, [props?.checked]);\r\n\r\n  const handleCheckedChange = React.useCallback(\r\n    (checked: CheckboxCheckedState) => {\r\n      if (isChecked === \"indeterminate\" && !onCheckedChange) {\r\n        return;\r\n      }\r\n\r\n      setIsChecked(checked);\r\n      onCheckedChange?.(checked);\r\n    },\r\n    [onCheckedChange, isChecked]\r\n  );\r\n\r\n  return (\r\n    <CheckboxRootContext.Provider\r\n      value={{\r\n        checked: isChecked,\r\n        setChecked: handleCheckedChange,\r\n        reduceMotion: reduceMotion ?? undefined,\r\n      }}\r\n    >\r\n      <CheckboxPrimitive.Root\r\n        data-size={size}\r\n        data-radius={radius}\r\n        data-checked={isChecked}\r\n        className={cn(checkboxVariants({ size, radius, className }))}\r\n        checked={isChecked}\r\n        onCheckedChange={handleCheckedChange}\r\n        {...props}\r\n      />\r\n    </CheckboxRootContext.Provider>\r\n  );\r\n}\r\n\r\nexport interface CheckboxIndicatorProps\r\n  extends React.ComponentProps<typeof CheckboxPrimitive.Indicator> {\r\n  icon?: React.ReactNode | ((props: CheckboxIconProps) => React.ReactNode);\r\n}\r\n\r\nfunction CheckboxIndicator({\r\n  className,\r\n  children,\r\n  icon = CheckboxIcon,\r\n  ref,\r\n  ...props\r\n}: CheckboxIndicatorProps) {\r\n  const { checked } = useCheckboxRoot();\r\n\r\n  const clonedIcon = React.useMemo(() => {\r\n    const result =\r\n      typeof icon === \"function\"\r\n        ? icon({ checked })\r\n        : React.cloneElement(icon as React.ReactElement<CheckboxIconProps>, {\r\n            checked,\r\n          });\r\n    return result;\r\n  }, [icon, checked]);\r\n\r\n  return (\r\n    <CheckboxPrimitive.Indicator\r\n      data-slot=\"checkbox-indicator\"\r\n      className={cn(className)}\r\n      {...props}\r\n      asChild\r\n      forceMount\r\n    >\r\n      {clonedIcon}\r\n    </CheckboxPrimitive.Indicator>\r\n  );\r\n}\r\n\r\nfunction CheckboxIcon({ checked }: CheckboxIconProps) {\r\n  const isIndeterminate = checked === \"indeterminate\";\r\n  const isChecked = checked === true;\r\n\r\n  if (isIndeterminate) {\r\n    return (\r\n      <svg stroke=\"currentColor\" strokeWidth={3} viewBox=\"0 0 24 24\">\r\n        <line x1=\"21\" x2=\"3\" y1=\"12\" y2=\"12\" />\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <svg\r\n      aria-hidden=\"true\"\r\n      fill=\"none\"\r\n      role=\"presentation\"\r\n      stroke=\"currentColor\"\r\n      strokeDasharray={22}\r\n      strokeDashoffset={isChecked ? 44 : 66}\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={2}\r\n      style={{\r\n        transition: `stroke-dashoffset 250ms linear`,\r\n        transitionDelay: `200ms`,\r\n      }}\r\n      viewBox=\"0 0 17 18\"\r\n    >\r\n      <polyline points=\"1 9 7 14 15 4\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport interface CheckboxProps\r\n  extends React.ComponentPropsWithRef<typeof CheckboxPrimitive.Root>,\r\n    VariantProps<typeof checkboxVariants> {\r\n  reduceMotion?: boolean | null;\r\n  icon?: React.ReactNode | ((props: CheckboxIconProps) => React.ReactNode);\r\n}\r\n\r\nfunction Checkbox({\r\n  className,\r\n  size = \"default\",\r\n  radius = \"default\",\r\n  reduceMotion,\r\n  children,\r\n  ref,\r\n  icon,\r\n  ...props\r\n}: CheckboxProps) {\r\n  return (\r\n    <CheckboxRoot\r\n      ref={ref}\r\n      className={className}\r\n      size={size}\r\n      radius={radius}\r\n      reduceMotion={reduceMotion ?? undefined}\r\n      {...props}\r\n    >\r\n      <CheckboxIndicator icon={icon}>{children}</CheckboxIndicator>\r\n    </CheckboxRoot>\r\n  );\r\n}\r\n\r\nexport { Checkbox, CheckboxRoot, CheckboxIndicator };\r\n",
      "type": "registry:ui"
    }
  ]
}