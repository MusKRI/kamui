{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch-shadcn",
  "type": "registry:ui",
  "title": "Switch",
  "description": "A customizable switch component",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-switch"
  ],
  "files": [
    {
      "path": "src/registry/pure-ui/components/shadcn/ui/switch/index.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\";\r\nimport { motion, MotionConfig } from \"motion/react\";\r\nimport { cva, VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/classes\";\r\n\r\nconst switchVariants = cva(\r\n  [\r\n    \"relative group inline-flex shrink-0 items-center focus-visible:outline-none focus-visible:shadow-none cursor-pointer data-[disabled=true]:opacity-50 data-[disabled=true]:pointer-events-none\",\r\n    \"[-webkit-tap-highlight-color:#0000]\",\r\n  ],\r\n  {\r\n    variants: {\r\n      size: {\r\n        xs: \"h-5\",\r\n        sm: \"h-6\",\r\n        default: \"h-7\",\r\n        lg: \"h-8\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\ninterface SwitchRootContextType {\r\n  checked: boolean;\r\n}\r\n\r\nconst SwitchRootContext = createContext<SwitchRootContextType>({\r\n  checked: false,\r\n});\r\n\r\nconst useSwitchRoot = (): SwitchRootContextType => {\r\n  const context = useContext(SwitchRootContext);\r\n  if (!context) {\r\n    throw new Error(\"useSwitchRoot must be used within a SwitchRoot\");\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface SwitchRootProps\r\n  extends React.ComponentProps<typeof SwitchPrimitive.Root>,\r\n    VariantProps<typeof switchVariants> {\r\n  reduceMotion?: boolean;\r\n  elastic?: boolean;\r\n  invalid?: boolean;\r\n  leftIcon?: React.ReactNode;\r\n  rightIcon?: React.ReactNode;\r\n}\r\n\r\nfunction SwitchRoot({\r\n  className,\r\n  size = \"default\",\r\n  reduceMotion,\r\n  elastic,\r\n  invalid = false,\r\n  leftIcon,\r\n  rightIcon,\r\n  children,\r\n  onCheckedChange,\r\n  disabled,\r\n  ...props\r\n}: SwitchRootProps) {\r\n  const [isChecked, setIsChecked] = useState<boolean>(\r\n    props?.checked ?? props?.defaultChecked ?? true\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (props?.checked !== undefined) setIsChecked(props.checked);\r\n  }, [props?.checked]);\r\n\r\n  const handleCheckedChange = useCallback(\r\n    (checked: boolean) => {\r\n      setIsChecked(checked);\r\n      onCheckedChange?.(checked);\r\n    },\r\n    [onCheckedChange]\r\n  );\r\n\r\n  return (\r\n    <MotionConfig\r\n      reducedMotion={reduceMotion ? \"always\" : \"never\"}\r\n      transition={{\r\n        type: \"tween\",\r\n        ease: [0.25, 0.1, 0.25, 1],\r\n        duration: 0.4,\r\n      }}\r\n    >\r\n      <SwitchRootContext.Provider value={{ checked: isChecked }}>\r\n        <SwitchPrimitive.Root\r\n          {...props}\r\n          asChild\r\n          checked={isChecked}\r\n          onCheckedChange={handleCheckedChange}\r\n          disabled={disabled}\r\n        >\r\n          <button\r\n            data-slot=\"switch-root\"\r\n            data-elastic={elastic || false}\r\n            data-size={size}\r\n            data-reduce-motion={reduceMotion || false}\r\n            data-invalid={invalid || false}\r\n            data-disabled={disabled}\r\n            className={cn(switchVariants({ size, className }))}\r\n          >\r\n            <div\r\n              data-slot=\"switch-track\"\r\n              className={cn([\r\n                \"inline-flex items-center rounded-full justify-start group-data-[state=checked]:justify-end bg-(--surface-3) group-data-[state=checked]:bg-gradient-to-b group-data-[state=checked]:from-(--accent)/78 group-data-[state=checked]:to-(--accent) group-data-[invalid=true]:outline-(--danger)\",\r\n                \"group-data-[size=xs]:w-7.5 group-data-[size=sm]:w-9.5 group-data-[size=default]:w-11.5 group-data-[size=lg]:w-13.5\",\r\n                \"group-data-[size=xs]:p-[2px] group-data-[size=sm]:p-[2px] group-data-[size=default]:p-[3px] group-data-[size=lg]:p-[3px]\",\r\n                \"outline -outline-offset-1 outline-(--border)/30 ring-offset-0 group-active:bg-(--surface-3)/75 group-active:group-data-[state=checked]:bg-(--accent) group-focus-visible:outline-(--accent) group-data-[state=checked]:group-focus-visible:outline-offset-2 group-data-[state=checked]:outline-(--accent)/30 group-data-[state=checked]:-outline-offset-1 transition-all ease-ease motion-reduce:transition-none group-data-[reduce-motion=true]:transition-none overflow-hidden relative\",\r\n              ])}\r\n            >\r\n              {leftIcon && (\r\n                <motion.div\r\n                  data-slot=\"switch-left-icon\"\r\n                  initial={false}\r\n                  animate={\r\n                    isChecked\r\n                      ? { scale: 1, opacity: 1, x: 0 }\r\n                      : { scale: 0.2, opacity: 0, x: -10 }\r\n                  }\r\n                  transition={{\r\n                    type: \"spring\",\r\n                    stiffness: 180,\r\n                    damping: 22,\r\n                    mass: 0.75,\r\n                    restDelta: 0.01,\r\n                    restSpeed: 0.01,\r\n                  }}\r\n                  className=\"absolute group-data-[size=xs]:[&_svg]:size-2 group-data-[size=sm]:[&_svg]:size-3 group-data-[size=default]:[&_svg]:size-3.5 group-data-[size=lg]:[&_svg]:size-4 left-1.5 top-1/2 -translate-y-1/2 text-(--background)\"\r\n                >\r\n                  {typeof leftIcon !== \"string\" ? leftIcon : null}\r\n                </motion.div>\r\n              )}\r\n              {children}\r\n              {rightIcon && (\r\n                <motion.div\r\n                  data-slot=\"switch-right-icon\"\r\n                  initial={false}\r\n                  animate={\r\n                    isChecked\r\n                      ? { scale: 0.2, opacity: 0, x: 10 }\r\n                      : { scale: 1, opacity: 1, x: 0 }\r\n                  }\r\n                  transition={{\r\n                    type: \"spring\",\r\n                    stiffness: 180,\r\n                    damping: 22,\r\n                    mass: 0.75,\r\n                    restDelta: 0.01,\r\n                    restSpeed: 0.01,\r\n                  }}\r\n                  className=\"absolute group-data-[size=xs]:[&_svg]:size-2 group-data-[size=sm]:[&_svg]:size-3 group-data-[size=default]:[&_svg]:size-3.5 group-data-[size=lg]:[&_svg]:size-4 right-1.5 top-1/2 -translate-y-1/2 text-(--foreground)\"\r\n                >\r\n                  {typeof rightIcon !== \"string\" ? rightIcon : null}\r\n                </motion.div>\r\n              )}\r\n            </div>\r\n          </button>\r\n        </SwitchPrimitive.Root>\r\n      </SwitchRootContext.Provider>\r\n    </MotionConfig>\r\n  );\r\n}\r\n\r\nSwitchRoot.displayName = SwitchPrimitive.Root.displayName;\r\n\r\ninterface SwitchThumbProps\r\n  extends React.ComponentProps<typeof SwitchPrimitive.Thumb> {\r\n  thumbIcon?: (props: { isChecked: boolean }) => React.ReactNode;\r\n}\r\n\r\nfunction SwitchThumb({\r\n  className,\r\n  thumbIcon,\r\n  children,\r\n  ...props\r\n}: SwitchThumbProps) {\r\n  const { checked } = useSwitchRoot();\r\n\r\n  return (\r\n    <SwitchPrimitive.Thumb asChild {...props}>\r\n      <motion.div layout data-slot=\"switch-thumb\">\r\n        <span\r\n          data-slot=\"switch-thumb-surface\"\r\n          className={cn(\r\n            \"flex items-center justify-center rounded-full select-none touch-none bg-(--background) shadow-[1px_1px_3px_0px_rgba(0,0,0,0.1)] group-data-[state=checked]:bg-(--accent-foreground) transition-all ease-ease motion-reduce:transition-none group-data-[reduce-motion=true]:transition-none\",\r\n            \"group-data-[size=xs]:size-[12px] group-data-[size=sm]:size-[16px] group-data-[size=default]:size-[20px] group-data-[size=lg]:size-[24px]\",\r\n            \"group-data-[size=xs]:group-data-[elastic=true]:group-active:w-[calc(12px*1.1)] group-data-[size=sm]:group-data-[elastic=true]:group-active:w-[calc(16px*1.1)] group-data-[size=default]:group-data-[elastic=true]:group-active:w-[calc(20px*1.1)] group-data-[size=lg]:group-data-[elastic=true]:group-active:w-[calc(24px*1.1)]\",\r\n            \"[&>svg]:size-3.5 text-(--muted-foreground) group-data-[state=checked]:[&>svg]:text-(--foreground)\",\r\n            className\r\n          )}\r\n        >\r\n          {thumbIcon && typeof thumbIcon !== \"string\"\r\n            ? thumbIcon({ isChecked: checked })\r\n            : null}\r\n        </span>\r\n      </motion.div>\r\n    </SwitchPrimitive.Thumb>\r\n  );\r\n}\r\n\r\nSwitchThumb.displayName = SwitchPrimitive.Thumb.displayName;\r\n\r\ninterface SwitchProps\r\n  extends React.ComponentProps<typeof SwitchPrimitive.Root>,\r\n    VariantProps<typeof switchVariants> {\r\n  reduceMotion?: boolean;\r\n  elastic?: boolean;\r\n  invalid?: boolean;\r\n  leftIcon?: React.ReactNode;\r\n  rightIcon?: React.ReactNode;\r\n  thumbIcon?: (props: { isChecked: boolean }) => React.ReactNode;\r\n}\r\n\r\nfunction Switch({\r\n  className,\r\n  size = \"default\",\r\n  reduceMotion = false,\r\n  elastic = false,\r\n  invalid = false,\r\n  leftIcon,\r\n  rightIcon,\r\n  thumbIcon,\r\n  children,\r\n  ...props\r\n}: SwitchProps) {\r\n  return (\r\n    <SwitchRoot\r\n      className={className}\r\n      size={size}\r\n      reduceMotion={reduceMotion}\r\n      elastic={elastic}\r\n      invalid={invalid}\r\n      leftIcon={leftIcon}\r\n      rightIcon={rightIcon}\r\n      {...props}\r\n    >\r\n      <SwitchThumb thumbIcon={thumbIcon} />\r\n    </SwitchRoot>\r\n  );\r\n}\r\n\r\nSwitch.displayName = \"Switch\";\r\n\r\nexport { Switch, SwitchRoot, SwitchThumb };\r\n",
      "type": "registry:ui"
    }
  ]
}