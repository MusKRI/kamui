import { exec } from "child_process";
import { promises as fs } from "fs";
import path from "path";
import { rimraf } from "rimraf";

import { pureUIComponentsRegistry } from "../registry/pure-ui/index";

async function buildPureUIComponentsRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by src/scripts/build-pure-registry.ts
// Do not edit this file directly.
import * as React from "react"


export const Index: Record<string, any> = {`;
  for (const item of pureUIComponentsRegistry.items) {
    const resolveFiles = item.files?.map(
      (file) => `src/registry/pure-ui/components/${file.path}`
    );
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path
      ? `@/registry/pure-ui/components/${item.files[0].path}`
      : "";

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    dependencies: ${JSON.stringify(item.dependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `src/registry/pure-ui/components/${
        typeof file === "string" ? file : file.path
      }`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  console.log(
    `#️⃣  ${Object.keys(pureUIComponentsRegistry.items).length} components found`
  );

  // Write style index.
  rimraf.sync(
    path.join(process.cwd(), "src/registry/pure-ui/components/__index__.tsx")
  );
  await fs.writeFile(
    path.join(process.cwd(), "src/registry/pure-ui/components/__index__.tsx"),
    index
  );
}

async function buildPureUIComponentsRegistryJsonFile() {
  // 1. Fix the path for registry items.
  const fixedRegistry = {
    ...pureUIComponentsRegistry,
    items: pureUIComponentsRegistry.items.map((item) => {
      const files = item.files?.map((file) => {
        return {
          ...file,
          path: `src/registry/pure-ui/components/${file.path}`,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  // 2. Write the content of the registry to `registry.json`
  rimraf.sync(
    path.join(process.cwd(), `src/registry/pure-ui/components/registry.json`)
  );
  await fs.writeFile(
    path.join(process.cwd(), `src/registry/pure-ui/components/registry.json`),
    JSON.stringify(fixedRegistry, null, 2)
  );
}

async function buildPureUIComponentsRegistry() {
  return new Promise((resolve, reject) => {
    const childProcess = exec(
      `npx shadcn build src/registry/pure-ui/components/registry.json --output ./public/r/pure-ui/components`
    );

    childProcess.on("exit", async (code) => {
      if (code === 0) {
        // Remove the unwanted registry.json from public directory
        const publicRegistryPath = path.join(
          process.cwd(),
          "public/r/pure-ui/components/registry.json"
        );
        try {
          await fs.unlink(publicRegistryPath);
          console.log(
            "🗑️  Removed unwanted registry.json from public directory"
          );
        } catch (error) {
          console.log("ℹ️  No registry.json to remove from public directory");
        }
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });
}

try {
  console.log("🗂️ Building src/registry/pure-ui/components/__index__.tsx...");
  await buildPureUIComponentsRegistryIndex();
  console.log("💅 Building src/registry/pure-ui/components/registry.json...");
  await buildPureUIComponentsRegistryJsonFile();
  console.log("🏗️ Building src/registry/pure-ui/components/...");
  await buildPureUIComponentsRegistry();
  console.log("✅ Done");
} catch (error) {
  console.error(error);
}
